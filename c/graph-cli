#!/usr/bin/env python

import graph_cli_constraints
import graph_cli_indexes
import graph_cli_match
import typer

import dot_init  # noqa: F401
import log
import services.graph.query
import services.graph.session

logger = log.init("cli")

app = typer.Typer()
app.add_typer(graph_cli_constraints.app, name="constraints")
app.add_typer(graph_cli_indexes.app, name="indexes")
app.add_typer(graph_cli_match.app, name="match")

import services.database.session  # noqa: E402

# initialize database
services.database.session.migrate()


@app.command()
def count():
    with services.graph.session.get() as neo:
        struct_graph = services.graph.query.match_node_count()
        records, summary = services.graph.query.execute_with_summary(struct_graph.query, struct_graph.params, neo)

        for record in records:
            logger.info(f"[graph-cli] nodes total {record['count']}")

        struct_graph = services.graph.query.match_edges_count()
        records, summary = services.graph.query.execute_with_summary(struct_graph.query, struct_graph.params, neo)

        for record in sorted(records, key=lambda record: -1 * record["count"]):
            logger.info(f"[graph-cli] relationships total {record['count']}")

        struct_graph = services.graph.query.match_node_label_group_count()
        records = services.graph.query.execute(struct_graph.query, struct_graph.params, neo)

        for record in sorted(records, key=lambda record: -1 * record["count"]):
            logger.info(f"[graph-cli] node label '{record['label'][0]}' count {record['count']}")


# @app.command()
# def person_age_gt(min: int = typer.Option(...)):
#     query = "MATCH (p:person)-[:has]-(n:age) WHERE n.value >= $min RETURN p as node,n.value as age"
#     params = {"min": min}

#     records = services.graph.query.execute(query, params)

#     for record in sorted(records, key=lambda record: record["age"]):
#         logger.info(f"[graph-cli] {record['node']['id']} age {record['age']}")


# @app.command()
# def person_age_lt(max: int = typer.Option(...)):
#     query = "MATCH (p:person)-[:has]-(n:age) WHERE n.value <= $max RETURN p as node,n.value as age"
#     params = {"max": max}

#     records = services.graph.query.execute(query, params)

#     for record in sorted(records, key=lambda record: record["age"]):
#         logger.info(f"[graph-cli] {record['node']['id']} age {record['age']}")


# @app.command()
# def vehicle_stolen_eq(value: str = typer.Option(...)):
#     query = "MATCH (v:vehicle)-[:has]->(n:stolen) WHERE n.value = $value RETURN v as node,n.value as value"
#     params = {"value": value}

#     records = services.graph.query.execute(query, params)

#     for record in sorted(records, key=lambda record: record["value"]):
#         logger.info(f"[graph-cli] {record['node']['id']} stolen {record['value']}")


if __name__ == "__main__":
    app()
