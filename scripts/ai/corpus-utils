#!/usr/bin/env python

import os
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import click

import dot_init

import models
import services.corpus
import services.corpus.keyword
import services.corpus.vector
import services.database
import services.qdrant

@click.group()
def cli():
    pass


@click.command()
@click.option('--name', default=None, required=True, help="corpus name")
@click.pass_context
def delete(ctx, name: str) -> list[str]:
    """
    
    """
    _print_status(f"corpus delete '{name}'")

    with services.database.session.get() as db_session:
        delete_code = services.corpus.delete_by_name(db_session=db_session, name=name)

    _print_status(f"corpus delete '{name}' - result {delete_code}")


@click.command()
@click.option('--source-uri', default=None, required=True, help="corpus directory, e.g. file://localhost/./data/rag/yyy")
@click.option('--model', default="gte-large", required=False, help="embedding model name, e.g. gpt4all, openai, gte-base, gte-large, nomic-embed-text-v1")
@click.option('--splitter', default="chunk:1024:40", required=False, help="text splitter, e.g. semantic, chunk:1024:40")
@click.pass_context
def ingest(ctx, source_uri: str, model: str, splitter: str) -> dict:
    """
    
    """
    with services.database.session.get() as db_session:
        corpus = services.corpus.get_by_source_uri(db_session=db_session, source_uri=source_uri)

        if not corpus:
            corpus = services.corpus.create(
                db_session=db_session,
                epoch=0,
                model=model,
                org_id=0,
                params={
                    "meta": {
                        "splitter": splitter,
                    }
                },
                source_uri=source_uri,
                state=models.corpus.STATE_DRAFT,
            )

        # update corpus epoch
        corpus.epoch = corpus.epoch + 1
        db_session.add(corpus)
        db_session.commit()

        _print_status(f"corpus {corpus.id} name '{corpus.name}' epoch {corpus.epoch} ingest starting")

        _write_result = services.corpus.ingest(
            db_session=db_session,
            corpus_id=corpus.id,
        )

    _print_status(f"corpus {corpus.id} name '{corpus.name}' epoch {corpus.epoch} ingest completed")


@click.command()
@click.option('--limit', default=50, required=False, help="search limit")
@click.option('--query', default="", required=False, help="search query")
@click.pass_context
def list(ctx, limit: int, query: str="") -> list[str]:
    """
    List database stores
    """
    with services.database.session.get() as db_session:
        list_result = services.corpus.list(db_session=db_session, query=query, offset=0, limit=limit)
    
    objects = list_result.objects

    _print_status(f"corpus list - {len(objects)} results")

    for i, object in enumerate(objects):
        _print_status(f"{i+1}: {object.name}")


@click.command()
@click.option('--limit', default=50, required=False, help="search limit")
@click.option('--query', default="", required=False, help="search query")
@click.pass_context
def list_keyword(ctx, limit: int, query: str="") -> list:
    """
    List keyword stores
    """
    # todo


@click.command()
@click.option('--limit', default=50, required=False, help="search limit")
@click.option('--query', default="", required=False, help="search query")
@click.pass_context
def list_vector(ctx, limit: int, query: str="") -> list:
    """
    List vector stores
    """
    objects = services.faiss.list()

    _print_status(f"vector list - {len(objects)} results")

    for i, object in enumerate(objects):
        if not(query) or (query in object.get("collection_name")):
            _print_status(f"{i+1}: {object}")


@click.command()
@click.option('--name', default=None, required=True, help="corpus encoded name")
@click.option('--query', default=None, required=True, help="question")
@click.option('--mode', default=None, required=True, help="query mode - augment, keyword, retrieve")
@click.pass_context
def query(ctx, name: str, query: str, mode: str, limit: int=10) -> dict:
    """
    
    """
    _print_status(f"corpus query '{name}' mode '{mode}' query '{query}'")

    if mode == "augment":
        with services.database.session.get() as db_session:
            response_result = services.corpus.vector.search_augment(db_session=db_session, name_encoded=name, query=query)

        print("response result:")
        print(response_result.response)
    elif mode == "keyword":
        with services.database.session.get() as db_session:
            nodes_result = services.corpus.keyword.search_retrieve(db_session=db_session, name_encoded=name, query=query, limit=limit)

        print(f"nodes result, len {len(nodes_result.nodes)}:")
        _print_nodes(nodes=nodes_result.nodes)
    elif mode == "retrieve":
        with services.database.session.get() as db_session:
            nodes_result = services.corpus.vector.search_retrieve(db_session=db_session, name_encoded=name, query=query, limit=limit)

        print(f"nodes result, len {len(nodes_result.nodes)}:")
        _print_nodes(nodes=nodes_result.nodes)


@click.command()
@click.pass_context
def scan(ctx) -> dict:
    """
    """
    _print_status("corpus scan")

    with services.database.session.get() as db_session:
        scan_result = services.corpus.scan(db_session=db_session, mode="update")

        _print_status(f"corpus scanned {scan_result.scan_count} dirty {len(scan_result.dirty_objects)}")

        for corpus in scan_result.dirty_objects:
            _print_status(f"corpus {corpus.id} name '{corpus.name}' dirty")


@click.command()
@click.pass_context
def sync(ctx) -> dict:
    """
    """
    with services.database.session.get() as db_session:
        corpus_list = services.corpus.list(db_session=db_session, query="", offset=0, limit=1024)
        corpus_objects = corpus_list.objects

        client = services.qdrant.client()

        qdrant_collections = client.get_collections().collections
        qdrant_names = [collection.name for collection in qdrant_collections]

        for corpus in corpus_objects:
            collection_name = corpus.storage_meta.get("vector", {}).get("collection", "")
            print(f"corpus sync '{corpus.name}' with collection '{collection_name}'", end=" ... ", flush=True)

            if collection_name not in qdrant_names:
                delete_code = services.corpus.delete_by_name(db_session=db_session, name=corpus.name)
                _print_status(f"qdrant missing, corpus deleted - result {delete_code}")
            else:
                _print_ok("ok")


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m")


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m")


def _print_status(s: str):
    print("\x1b[1;33m" + s + "\x1b[0m")


def _print_nodes(nodes):
    print(
        f"\n{'-' * 100}\n".join(
            [f"Document {i+1}:\n\n" + n.text for i, n in enumerate(nodes)]
        )
    )

cli.add_command(delete)
cli.add_command(list)
cli.add_command(list_keyword)
cli.add_command(list_vector)
cli.add_command(query)
cli.add_command(ingest)
cli.add_command(scan)
cli.add_command(sync)

if __name__ == "__main__":
    cli()
