#!/usr/bin/env python

import os
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import click

import dot_init

import services.corpus
import services.corpus.vector
import services.database
import services.milvus


@click.group()
def cli():
    pass


@click.command()
@click.option('--name', default=None, required=True, help="corpus name")
@click.pass_context
def delete(ctx, name: str) -> list[str]:
    """
    
    """
    _print_status(f"corpus delete '{name}'")

    with services.database.session.get() as db_session:
        delete_code = services.corpus.delete_by_name(db_session=db_session, name=name)

    _print_status(f"corpus delete '{name}' - result {delete_code}")


@click.command()
@click.option('--dir', default=None, required=True, help="corpus directory")
@click.option('--model', default=None, required=True, help="embedding model name, e.g. gpt4all, openai, gte-base, gte-large, nomic-embed-text-v1")
@click.pass_context
def ingest(ctx, dir: str, model: str) -> dict:
    """
    
    """
    files_list = os.listdir(dir)

    if len(files_list) > 1:
        raise "single file only"

    dir_name = dir.split("/")[-1]

    name_encoded = services.corpus.name_encode(corpus=dir_name, model=model)
    embed_model = services.corpus.embed_model(model=model)
    embed_dims = services.corpus.embed_dims(model=model)

    _print_status(f"corpus write dir '{dir_name}' model '{embed_model.model_name}' dimensions {embed_dims} encoded '{name_encoded}'")

    with services.database.session.get() as db_session:
        write_result = services.corpus.ingest(
            db_session=db_session,
            name_encoded=name_encoded,
            dir=dir,
            embed_model=embed_model,
            embed_dims=embed_dims,
        )

    _print_status(f"corpus write  dir '{dir_name}' model '{embed_model.model_name}' dimensions {embed_dims} encoded '{name_encoded}' result docs {write_result.docs_count} nodes {write_result.nodes_count}")


@click.command()
@click.option('--limit', default=50, required=False, help="search limit")
@click.option('--query', default="", required=False, help="search query")
@click.pass_context
def list(ctx, limit: int, query: str="") -> list[str]:
    """
    
    """
    with services.database.session.get() as db_session:
        list_result = services.corpus.list_(db_session=db_session, query=query, offset=0, limit=limit)
    
    objects = list_result.objects

    _print_status(f"corpus list - {len(objects)} results")

    for i, object in enumerate(objects):
        _print_status(f"{i+1}: {object.name}")


@click.command()
@click.option('--limit', default=50, required=False, help="search limit")
@click.option('--query', default="", required=False, help="search query")
@click.pass_context
def list_keyword(ctx, limit: int, query: str="") -> list:
    """
    
    """


@click.command()
@click.option('--limit', default=50, required=False, help="search limit")
@click.option('--query', default="", required=False, help="search query")
@click.pass_context
def list_vector(ctx, limit: int, query: str="") -> list:
    """
    
    """
    objects = services.milvus.list_details()

    _print_status(f"vector list - {len(objects)} results")

    for i, object in enumerate(objects):
        if not(query) or (query in object.get("collection_name")):
            _print_status(f"{i+1}: {object}")


@click.command()
@click.option('--name', default=None, required=True, help="corpus encoded name")
@click.option('--query', default=None, required=True, help="question")
@click.option('--mode', default=None, required=True, help="query mode - augment or retrieve")
@click.pass_context
def query(ctx, name: str, query: str, mode: str, limit: int=10) -> dict:
    """
    
    """
    _print_status(f"corpus query '{name}' mode '{mode}' query '{query}'")

    if mode == "augment":
        with services.database.session.get() as db_session:
            response_result = services.corpus.get_response(db_session=db_session, name_encoded=name, query=query)

        print("")
        print("response result:")
        print(response_result.response)
    else:
        with services.database.session.get() as db_session:
            nodes_result = services.corpus.vector.search_retrieve(db_session=db_session, name_encoded=name, query=query, limit=limit)

        print(f"nodes result, len {len(nodes_result.nodes)}:")
        _print_nodes(nodes=nodes_result.nodes)


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m")


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m")


def _print_status(s: str):
    print("\x1b[1;33m" + s + "\x1b[0m")


def _print_nodes(nodes):
    print(
        f"\n{'-' * 100}\n".join(
            [f"Document {i+1}:\n\n" + n.text for i, n in enumerate(nodes)]
        )
    )

cli.add_command(delete)
cli.add_command(list)
cli.add_command(list_keyword)
cli.add_command(list_vector)
cli.add_command(query)
cli.add_command(ingest)

if __name__ == "__main__":
    cli()
