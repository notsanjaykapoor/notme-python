#!/usr/bin/env python

import glob
import os
import re
import subprocess
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import prefect

import dot_init  # noqa: E402, F401


@prefect.flow()
def biotrack_dw_load(warehouse_uri: str, dump_dir: str) -> int:
    logger = prefect.get_run_logger()
    logger.info(f"warehouse' {warehouse_uri}' load source tables in '{dump_dir}'")

    # load schemas
    for schema_file in glob.glob(f"{dump_dir}/*public*schema.sql"):
        _biotrack_dw_load_schema(warehouse_uri=warehouse_uri, schema_file=schema_file)

    # load data
    for csv_file in glob.glob(f"{dump_dir}/*.csv"):
        _biotrack_dw_load_csv(warehouse_uri=warehouse_uri, csv_file=csv_file)


@prefect.task()  # not used
def _biotrack_dw_drop_create(warehouse_uri: str) -> int:
    logger = prefect.get_run_logger()
    logger.info(f"reset warehouse '{warehouse_uri}'")

    # parse warehouse uri into db uri and name
    db_uri, db_name = re.search("(.*\/\/.*)\/(.*)", warehouse_uri).groups()

    try:
        subprocess.run(["psql", db_uri, "-c", f"drop database {db_name}"], check=True)
    except Exception as e:
        logger.error(f"exception {e}")

    try:
        subprocess.run(["psql", db_uri, "-c", f"create database {db_name}"], check=True)
    except Exception as e:
        logger.error(f"exception {e}")

    return 0


@prefect.task()
def _biotrack_dw_load_csv(warehouse_uri: str, csv_file: str) -> int:
    logger = prefect.get_run_logger()

    _, table_name = re.search("(.*\.)(.*)\.csv", csv_file).groups()

    try:
        logger.info(f"warehouse '{warehouse_uri}' table '{table_name}' truncate")

        subprocess.run(
            ["psql", "-d", warehouse_uri, "-c", f"truncate table {table_name};"],
            check=True,
            capture_output=False,
            stdout=None,
            stderr=None,
        )
    except Exception as e:
        logger.error(f"psql exception {e}")
        raise e

    try:
        logger.info(
            f"warehouse '{warehouse_uri}' table '{table_name}' load csv '{csv_file}'"
        )

        subprocess.run(
            [
                "psql",
                "-d",
                warehouse_uri,
                "-c",
                f"\copy {table_name} from '{csv_file}' delimiter ',' csv header",
            ],
            check=True,
            capture_output=False,
            stdout=None,
            stderr=None,
        )
    except Exception as e:
        logger.error(f"psql exception {e}")
        raise e

    return 0


@prefect.task()
def _biotrack_dw_load_schema(warehouse_uri: str, schema_file: str) -> int:
    logger = prefect.get_run_logger()

    _, table_name = re.search("(.*\.)(.*)\.schema\.sql", schema_file).groups()

    try:
        logger.info(f"warehouse '{warehouse_uri}' check schema '{table_name}'")

        subprocess.run(
            ["psql", "-d", warehouse_uri, "-c", f"drop table if exists {table_name};"],
            check=True,
            capture_output=False,
            stdout=None,
            stderr=None,
        )
    except Exception as e:
        logger.error(f"psql exception {e}")
        raise e

    try:
        logger.info(f"warehouse '{warehouse_uri}' load schema file '{schema_file}'")

        cmd = f"psql -d {warehouse_uri} -f {schema_file}"
        subprocess.run(
            cmd.split(" "), check=True, capture_output=False, stdout=None, stderr=None
        )
    except Exception as e:
        logger.error(f"psql exception {e}")
        raise e

    return 0


if __name__ == "__main__":
    biotrack_dw_load(
        warehouse_uri=os.environ["BIOTRACK_WAREHOUSE_URI"], dump_dir="./data/biotrack"
    )
