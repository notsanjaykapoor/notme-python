#!/usr/bin/env python

import os
import subprocess
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import prefect
import prefect.orion.schemas.states

import dot_init  # noqa: E402, F401


@prefect.flow()
def biotrack_export_data(biotrack_uri: str, biotrack_tables: list[str], dump_dir: str) -> int:
    logger = prefect.get_run_logger()
    logger.info(f"biotrack export data starting")

    for table_name in biotrack_tables:
        _biotrack_export_table_csv(biotrack_uri=biotrack_uri, table_name=table_name, dump_dir=dump_dir)

    # try:
    #     cmd = f"pg_dump -Fc -d {biotrack_uri} -t {table_name} --no-owner --no-acl -f ./data/biotrack/biotrack.{table_name}.dump"

    #     subprocess.run(cmd.split(" "), check=True, capture_output=False, stdout=None, stderr=None)

    #     return 0
    # except Exception as e:
    #     logger.error(f"flow exception {e}")
    #     return 1


@prefect.flow()
def biotrack_export_schemas(biotrack_uri: str, biotrack_tables: list[str], dump_dir: str) -> int:
    logger = prefect.get_run_logger()
    logger.info(f"biotrack export schemas starting")

    for table_name in biotrack_tables:
        _biotrack_export_schema(biotrack_uri=biotrack_uri, table_name=table_name, dump_dir=dump_dir)


@prefect.task()
def _biotrack_export_schema(biotrack_uri: str, table_name: str, dump_dir: str) -> int:
    logger = prefect.get_run_logger()
    logger.info(f"export schema '{table_name}'")

    try:
        cmd = f"pg_dump -d {biotrack_uri} -s -t {table_name} --no-owner --no-acl -f {dump_dir}/biotrack.{table_name}.schema.sql"

        subprocess.run(cmd.split(" "), check=True, capture_output=False, stdout=None, stderr=None)

        return 0
    except Exception as e:
        logger.error(f"pg_dump exception {e}")
        return 1


@prefect.task()
def _biotrack_export_table_csv(biotrack_uri: str, table_name: str, dump_dir: str) -> int:
    logger = prefect.get_run_logger()

    csv_file = f"{dump_dir}/biotrack.{table_name}.csv"

    logger.info(f"export table '{table_name}' to {csv_file}")

    try:
        subprocess.run(
            ["psql", "-d", biotrack_uri, "-c", f"\copy (select * from {table_name}) to '{csv_file}' delimiter ',' csv header"],
            check=True,
            capture_output=False,
            stdout=None,
            stderr=None,
        )
    except Exception as e:
        logger.error(f"psql exception {e}")
        return 1

    return 0


@prefect.task()
def _biotrack_export_table_sql(biotrack_uri: str, table_name: str, dump_dir: str) -> int:
    logger = prefect.get_run_logger()
    logger.info(f"export table '{table_name}'")

    try:
        cmd = f"pg_dump -d {biotrack_uri} -t {table_name} --no-owner --no-acl -f {dump_dir}/biotrack.{table_name}.sql"

        subprocess.run(cmd.split(" "), check=True, capture_output=False, stdout=None, stderr=None)

        return 0
    except Exception as e:
        logger.error(f"pg_dump exception {e}")
        return 1


if __name__ == "__main__":
    # 1. export public schemas
    # 2. edit schemas to match views

    biotrack_uri = os.environ["BIOTRACK_SOURCE_URI"]
    biotrack_schemas = [table_name.strip() for table_name in os.environ["BIOTRACK_SOURCE_SCHEMAS"].split(",")]
    biotrack_tables = [table_name.strip() for table_name in os.environ["BIOTRACK_SOURCE_TABLES"].split(",")]

    # table_names = [
    #     "bmsi_labresults_potency_analysis",  # permission denied for sequence bmsi_labresults_potency_analysis_id_seq
    #     "bmsi_labresults_samples",
    #     "inventory",
    # ]

    # biotrack_export_schemas(biotrack_uri=biotrack_uri, biotrack_tables=biotrack_schemas, dump_dir=".")

    biotrack_export_data(biotrack_uri=biotrack_uri, biotrack_tables=biotrack_tables, dump_dir="./data/biotrack")
