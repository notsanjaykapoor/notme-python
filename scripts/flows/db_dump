#!/usr/bin/env python

import os
import subprocess
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import click
import prefect
import prefect_aws
import prefect_aws.s3
import ulid

import dot_init  # noqa: E402, F401


@click.command()
@click.option("--uri", help="source database uri, e.g. 'postgresql://user:pwd@host:port/db'")
@click.option("--bucket", help="aws upload bucket, e.g. 'lt-db-dev'")
@prefect.flow()
def db_dump(uri: str, bucket: str):
    dump_path = _db_dump(uri=uri)

    _db_upload(bucket=bucket, path=dump_path)


@prefect.task()
def _db_dump(uri: str) -> str:
    logger = prefect.get_run_logger()

    try:
        db_dump_file = f"./db.{ulid.new().str}.dump"

        logger.info(f"dump to local file '{db_dump_file}'")

        cmd = f"pg_dump -Fc -d {uri} --exclude-table-data=public.auditlog_logentry -f {db_dump_file} --no-acl"

        subprocess.run(cmd.split(" "), check=True)

        return db_dump_file
    except Exception as e:
        logger.error(f"dump exception {e}")
        raise e


@prefect.task()
def _db_upload(bucket: str, path: str):
    logger = prefect.get_run_logger()

    logger.info(f"upload '{path}' to aws bucket '{bucket}'")

    aws_creds = prefect_aws.AwsCredentials(
        aws_access_key_id=os.environ.get("AWS_ACCESS_KEY_ID"),
        aws_secret_access_key=os.environ.get("AWS_SECRET_ACCESS_KEY"),
    )

    s3_bucket = prefect_aws.s3.S3Bucket(
        aws_credentials=aws_creds,
        bucket_name=bucket,
    )

    objects = s3_bucket.list_objects()

    print(objects)

    s3_bucket.upload_from_path(path, path)


if __name__ == "__main__":
    db_dump()
