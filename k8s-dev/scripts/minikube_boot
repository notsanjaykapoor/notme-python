#!/usr/bin/env python

import os
import re
import socket
import subprocess
import sys

sys.path.insert(1, os.path.join(sys.path[0], "../.."))

import dot_init
import log

logger = log.init("console")

MINIKUBE_MOUNT_STRING = "--mount-string=~/data:/host-data"
MINIKUBE_NAME = "minikube"


def k8s_check(cluster_name: str) -> int:
    try:
        subprocess.run(["kubectl", "cluster-info", "--cluster", cluster_name], check=True)

        logger.info(f"k8s {cluster_name} ok")

        return 0
    except Exception as e:
        logger.error(f"k8s {cluster_name} error {e}")
        return 1


def k8s_create(cluster_name: str) -> int:
    try:
        subprocess.run(["minikube", "start", "--mount=true", MINIKUBE_MOUNT_STRING], check=True)

        logger.info(f"k8s cluster {cluster_name} created")

        return 0
    except Exception as e:
        logger.error(f"k8s cluster {cluster_name} error {e}")
        return 1


def k8s_services_start(cluster_name: str) -> int:
    k8s_dirs = [
        "k8s-dev/neo4j",
        "k8s-dev/postgres",
        "k8s-dev/redpanda/install",
        "k8s-dev/typesense",
    ]

    for k8s_dir in k8s_dirs:
        try:
            subprocess.run(["kubectl", "apply", "-k", k8s_dir], check=True)
        except Exception as e:
            logger.error(f"k8s deploy error {k8s_dir} error {e}")
            return 1

    return 0


def postgres_check(uri: str) -> int:
    try:
        m = re.search("postgresql:\/\/.*:.*@(.*):(\d*)\/.*", uri)

        if not m:
            logger.error(f"postgres connection string is invalid")
            return 1

        host = m[1]
        port = int(m[2])

        s = socket.socket()
        s.connect((host, port))
        s.close()

        logger.info(f"postgres ok")

        return 0
    except Exception as e:
        logger.error(f"postgres exception {e}")
        return 1


def redpanda_check(uri: str) -> int:
    try:
        m = re.search("(.*):(\d*)", uri)

        if not m:
            logger.error(f"redpanda connection string is invalid")
            return 1

        host = m[1]
        port = int(m[2])

        s = socket.socket()
        s.connect((host, port))
        s.close()

        logger.info(f"redpanda ok")

        return 0
    except Exception as e:
        logger.error(f"redpanda exception {e}")
        return 1


def typesense_check(uri: str) -> int:
    try:
        m = re.search("https?:\/\/(.*):(\d*)", uri)

        if not m:
            logger.error(f"typesense connection string is invalid")
            return 1

        host = m[1]
        port = int(m[2])

        s = socket.socket()
        s.connect((host, port))
        s.close()

        logger.info(f"typesense ok")

        return 0
    except Exception as e:
        logger.error(f"typesense exception {e}")
        return 1


if __name__ == "__main__":
    if k8s_check(MINIKUBE_NAME) != 0:
        # start minikube
        if k8s_create(MINIKUBE_NAME) != 0:
            exit(-1)

    # start services
    k8s_services_start(MINIKUBE_NAME)

    # check services
    postgres_check(uri=os.environ["DATABASE_URL"])
    redpanda_check(uri=os.environ["KAFKA_BROKERS"])
    typesense_check(uri=os.environ["TYPESENSE_URL"])
