#!/usr/bin/env python

from dotenv import load_dotenv

load_dotenv()  # take environment variables from .env.

import asyncio  # noqa: E402
import json  # noqa: E402
import os  # noqa: E402
import signal  # noqa: E402
import sys  # noqa: E402

import typer  # noqa: E402
import ulid  # noqa: E402
import uvloop  # noqa: E402
import websocket  # noqa: E402

sys.path.insert(1, os.path.join(sys.path[0], ".."))

import kafka  # noqa: E402
import kafka.handlers  # noqa: E402
import log  # noqa: E402
import services.crypto.pkey  # noqa: E402
import services.database.session  # noqa: E402
import services.users  # noqa: E402
from actors.example.app import App  # noqa: E402

logger = log.init("cli")

app = typer.Typer()


@app.command()
def actor_client(topic: str = typer.Option(...)):
    writer = kafka.Writer(topic=topic)

    file = f"{topic}.json"  # e.g. example.json
    data = json.load(open(file))

    for record in data:
        # write to kafka stream
        writer.call(
            key=ulid.new().str,
            message=record,
        )

        break


@app.command()
def actor_server(app: str = typer.Option(...), msg: str = "ping"):
    uvloop.install()
    asyncio.run(actor_server_async(app=app, msg=msg))


async def actor_server_async(app: str, msg: str):
    logger.info("cli actor_server starting")

    # start app
    struct_app = App(toml_file=f"./data/apps/{app}.toml").call()

    # get app actors
    actors = [actor for name, actor in struct_app.actors.items()]

    def signal_handler(signum, frame):
        logger.info("cli actor_server signal handler ... cleaning up")
        for actor in actors:
            actor.cancel()

    # install signal handler
    signal.signal(signal.SIGINT, signal_handler)

    # wait on tasks
    logger.info(f"cli actor_server wait on {len(actors)} actors")

    try:
        tasks = [actor.task for actor in actors]
        await asyncio.gather(*tasks)
    except KeyboardInterrupt:
        logger.error(f"cli actor_server exception {sys.exc_info()[0]}")

    # actor_source = struct_manager.actors["source"]
    #
    # message = {
    #   "message": msg,
    # }
    #
    # r = range(5)
    #
    # for i in r:
    #   await asyncio.sleep(3)
    #
    #   message["index"] = i
    #   message["rid"] = ulid.new().str
    #
    #   actor_source.queue.put_nowait(message)


@app.command()
def crypto_sign(data: str = "secret"):
    struct_pkey = services.crypto.pkey.Create().call()

    private_key = struct_pkey.key
    public_key = private_key.public_key()

    struct_sign = services.crypto.pkey.Sign(private_key, data).call()

    logger.info(f"cli sign {struct_sign}")

    signature = struct_sign.encoded

    if signature is None:
        raise ValueError("signature missing")

    struct_verify = services.crypto.pkey.Verify(
        public_key,
        data,
        signature,
    ).call()

    logger.info(f"cli verify {struct_verify}")


@app.command()
def json_rewrite(file: str = "./data/example/example.json"):
    logger.info(f"cli json_rewrite file {file}")

    data = json.load(open(file))
    records = []
    with open("./data/example/graph.json", "w") as output:
        for record in data:
            record["id"] = ulid.new().str
            records.append(record)

        output.write(json.dumps(records))


@app.command()
def topic_read(topic: str = typer.Option(...), group: str = "python"):
    uvloop.install()
    asyncio.run(topic_read_async(topic=topic, group=group))


async def topic_read_async(topic: str = typer.Option(...), group: str = "python"):
    # call reader with generic handler
    handler = kafka.handlers.Generic()
    reader = kafka.Reader(topic, group, handler)
    await reader.call()


@app.command()
def topic_write(topic: str = typer.Option(...), key: str = typer.Option(...)):
    # todo: use async?

    writer = kafka.Writer(topic=topic)

    writer.call(
        key=key,
        message={
            "message": "ping",
            "rid": ulid.new().str,
        },
    )


@app.command()
def user_create(name: str = typer.Option(...)):
    logger.info(f"cli user {name} create try")

    with services.database.session.get() as db:
        struct_get = services.users.Get(db=db, user_id=name).call()

        if struct_get.user:
            logger.info(f"cli result user {name} exists")
            return 0

        struct_create = services.users.Create(db=db, user_id=name).call()

        if struct_create.code == 0:
            logger.info(f"cli result user {name} created")

        return struct_create.user_id


@app.command()
def user_search(query: str = ""):
    with services.database.session.get() as db:
        service = services.users.List(db, query, 0, 10)
        struct = service.call()

        for user in struct.users:
            logger.info(f"cli result {user}")


@app.command()
def ws_send(message: str = "hey"):
    logger.info(f"cli websocket sending '{message}'")

    ws = websocket.WebSocket()
    ws.connect(f"{os.environ['WS_URL']}/ws")
    ws.send(message)
    ws.close()


if __name__ == "__main__":
    app()
